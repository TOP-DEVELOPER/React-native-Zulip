From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Greg Price <greg@zulip.com>
Date: Tue, 7 Jun 2022 20:57:09 -0700
Subject: [tsflower] Replace interface-extends with spread for non-interface
 bases
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

In TypeScript, `interface T { … }` and `type T = { … }`, when there
are no other type definitions for T, mean exactly the same thing.

In Flow, they're different -- an interface is a different kind of
type from an object type.  In particular, a further interface
definition can extend an interface, but can't extend an object type.

Currently, TsFlower emits an interface when it sees an interface.
That's good if the type definitions are going to go on to use that
interface as the base for another interface, or for a class; it's
bad if it was extending another type that turns out to be just an
object type.

Probably an improvement to the heuristic would be to convert an
interface declaration to an object type, with `extends` turned into
a spread, when the base is an object type -- as it is in these
examples.
---
 .../lib/typescript/SafeArea.types.js.flow     | 22 +++++++++++--------
 .../lib/typescript/SafeAreaContext.js.flow    | 12 +++++-----
 .../specs/NativeSafeAreaProvider.js.flow      |  8 ++++---
 .../specs/NativeSafeAreaView.js.flow          | 10 +++++----
 4 files changed, 31 insertions(+), 21 deletions(-)

diff --git types/react-native-safe-area-context/lib/typescript/SafeArea.types.js.flow types/react-native-safe-area-context/lib/typescript/SafeArea.types.js.flow
index 88ba6cc09..056367669 100644
--- types/react-native-safe-area-context/lib/typescript/SafeArea.types.js.flow
+++ types/react-native-safe-area-context/lib/typescript/SafeArea.types.js.flow
@@ -33,13 +33,17 @@ export interface Metrics {
 export type InsetChangedEvent = $tsflower_subst$RN$NativeSyntheticEvent<Metrics>;
 export type InsetChangeNativeCallback = (event: InsetChangedEvent) => void;
 
-export interface NativeSafeAreaProviderProps extends $tsflower_subst$RN$ViewProps {
-  children?: $tsflower_subst$React$ReactNode;
-  onInsetsChange: InsetChangeNativeCallback;
-}
+export type NativeSafeAreaProviderProps = {
+  ...$tsflower_subst$RN$ViewProps,
+  children?: $tsflower_subst$React$ReactNode,
+  onInsetsChange: InsetChangeNativeCallback,
+  ...
+};
 
-export interface NativeSafeAreaViewProps extends $tsflower_subst$RN$ViewProps {
-  children?: $tsflower_subst$React$ReactNode;
-  mode?: 'padding' | 'margin';
-  edges?: $ReadOnlyArray<Edge>;
-}
+export type NativeSafeAreaViewProps = {
+  ...$tsflower_subst$RN$ViewProps,
+  children?: $tsflower_subst$React$ReactNode,
+  mode?: 'padding' | 'margin',
+  edges?: $ReadOnlyArray<Edge>,
+  ...
+};
diff --git types/react-native-safe-area-context/lib/typescript/SafeAreaContext.js.flow types/react-native-safe-area-context/lib/typescript/SafeAreaContext.js.flow
index 7231a733b..5e7699444 100644
--- types/react-native-safe-area-context/lib/typescript/SafeAreaContext.js.flow
+++ types/react-native-safe-area-context/lib/typescript/SafeAreaContext.js.flow
@@ -18,11 +18,13 @@ import { type EdgeInsets, type Metrics, type Rect } from './SafeArea.types';
 declare export var SafeAreaInsetsContext: $tsflower_subst$React$Context<EdgeInsets | null>;
 declare export var SafeAreaFrameContext: $tsflower_subst$React$Context<Rect | null>;
 
-export interface SafeAreaProviderProps extends $tsflower_subst$RN$ViewProps {
-  children?: $tsflower_subst$React$ReactNode;
-  initialMetrics?: Metrics | null;
-  initialSafeAreaInsets?: EdgeInsets | null;
-}
+export type SafeAreaProviderProps = {
+  ...$tsflower_subst$RN$ViewProps,
+  children?: $tsflower_subst$React$ReactNode,
+  initialMetrics?: Metrics | null,
+  initialSafeAreaInsets?: EdgeInsets | null,
+  ...
+};
 
 declare export function SafeAreaProvider(SafeAreaProviderProps): $tsflower_subst$React$JSX$Element;
 declare export function useSafeAreaInsets(): EdgeInsets;
diff --git types/react-native-safe-area-context/lib/typescript/specs/NativeSafeAreaProvider.js.flow types/react-native-safe-area-context/lib/typescript/specs/NativeSafeAreaProvider.js.flow
index 7a1594b3b..5d9e21df4 100644
--- types/react-native-safe-area-context/lib/typescript/specs/NativeSafeAreaProvider.js.flow
+++ types/react-native-safe-area-context/lib/typescript/specs/NativeSafeAreaProvider.js.flow
@@ -27,8 +27,10 @@ export type Event = Readonly<{
   ...
 }>;
 
-export interface NativeProps extends $tsflower_subst$RN$ViewProps {
-  onInsetsChange?: DirectEventHandler<Event, 'paperInsetsChange'>;
-}
+export type NativeProps = {
+  ...$tsflower_subst$RN$ViewProps,
+  onInsetsChange?: DirectEventHandler<Event, 'paperInsetsChange'>,
+  ...
+};
 declare var _default: HostComponent<NativeProps>;
 export default _default;
diff --git types/react-native-safe-area-context/lib/typescript/specs/NativeSafeAreaView.js.flow types/react-native-safe-area-context/lib/typescript/specs/NativeSafeAreaView.js.flow
index 6e8337b9b..300c246bb 100644
--- types/react-native-safe-area-context/lib/typescript/specs/NativeSafeAreaView.js.flow
+++ types/react-native-safe-area-context/lib/typescript/specs/NativeSafeAreaView.js.flow
@@ -5,10 +5,12 @@ import type { ViewProps as $tsflower_subst$RN$ViewProps } from 'tsflower/subst/r
 import { typeof WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
 import { type HostComponent } from 'react-native';
 
-export interface NativeProps extends $tsflower_subst$RN$ViewProps {
-  mode?: WithDefault<'padding' | 'margin', 'padding'>;
-  edges /* tsflower-warning: unimplemented: 'readonly' as type operator */?: string[] /*  readonly string[] */;
-}
+export type NativeProps = {
+  ...$tsflower_subst$RN$ViewProps,
+  mode?: WithDefault<'padding' | 'margin', 'padding'>,
+  edges /* tsflower-warning: unimplemented: 'readonly' as type operator */?: string[] /*  readonly string[] */,
+  ...
+};
 
 declare var _default: HostComponent<NativeProps>;
 export default _default;
-- 
2.32.0

