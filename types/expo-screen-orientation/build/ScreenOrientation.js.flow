/* @flow
 * @generated by TsFlower
 */
import {
  Orientation,
  type OrientationT as OrientationT_,
  type OrientationChangeEvent as OrientationChangeEvent_,
  type OrientationChangeListener as OrientationChangeListener_,
  OrientationLock,
  type OrientationLockT as OrientationLockT_,
  type PlatformOrientationInfo as PlatformOrientationInfo_,
  WebOrientationLock,
  WebOrientation,
  SizeClassIOS,
  type ScreenOrientationInfo as ScreenOrientationInfo_,
} from './ScreenOrientation.types';

// From expo-modules-core. Could get types for expo-modules-core, if enough
// of types/expo-* would make good use of them.
export type Subscription = {
  /**
   * A method to unsubscribe the listener.
   */
  remove: () => void,
};

export { Orientation, OrientationLock, WebOrientationLock, WebOrientation, SizeClassIOS };

export type OrientationT = OrientationT_;
export type OrientationLockT = OrientationLockT_;
export type PlatformOrientationInfo = PlatformOrientationInfo_;
export type OrientationChangeListener = OrientationChangeListener_;
export type OrientationChangeEvent = OrientationChangeEvent_;
export type ScreenOrientationInfo = ScreenOrientationInfo_;

declare export function lockAsync(orientationLock: OrientationLockT): Promise<void>;
declare export function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void>;
declare export function unlockAsync(): Promise<void>;
declare export function getOrientationAsync(): Promise<OrientationT>;
declare export function getOrientationLockAsync(): Promise<OrientationLockT>;
declare export function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo>;
declare export function supportsOrientationLockAsync(
  orientationLock: OrientationLockT,
): Promise<boolean>;
declare export function addOrientationChangeListener(
  listener: OrientationChangeListener,
): Subscription;
declare export function removeOrientationChangeListeners(): void;
declare export function removeOrientationChangeListener(subscription: Subscription): void;
