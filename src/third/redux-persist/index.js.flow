// @flow
import type { Config } from './types';
import purgeStoredState from './purgeStoredState';

// redux dependent typing
declare type Store = Object;
declare type StoreEnhancer = (next: Function) => Function;

// redux-persist typing
declare type Purge = (keys?: Array<string>) => void;
declare type Rehydrate = (incoming: Object, options: {| serial: boolean |}) => void;
declare type Persistor = {|
  purge: Purge,
  rehydrate: Rehydrate,
  pause: () => void,
  resume: () => void,
|};
declare type OnComplete = (err?: any, result?: Object) => void;

type StoredStateCallback = (state: Object, err: any) => void;

type StateReconciler = (prevState: any, inboundState: any, nextState: any, log: boolean) => any;
type AutoRehydrateConfig = {|
  log?: boolean,
  stateReconciler?: StateReconciler,
|};

declare function createPersistor(store: Store, config: Config): Persistor;
declare function getStoredState(config: Config, ?StoredStateCallback): ?Promise<Object>;
declare function persistStore(store: Store, config?: Config, onComplete?: OnComplete): Persistor;
declare function autoRehydrate(config: ?AutoRehydrateConfig): StoreEnhancer;

export { createPersistor, getStoredState, persistStore, purgeStoredState, autoRehydrate };

export type { Persistor, Config };
