#!/usr/bin/env node
/* eslint-env node */

const { rollup } = require('rollup');
const rollupBabel = require('rollup-plugin-babel');
const rollupResolve = require('rollup-plugin-node-resolve');

const assert = require('assert');
const fs = require('fs');
const util = require('util');

const sourceFilename = 'src/webview/js/js.js';
const outputFilename = 'src/webview/js/generatedEs3.js';

// Disable the default react-native transformations.
// See `$ROOT/babel.config.js`.
process.env.BABEL_ENV = 'webview';

// node's fs predates async/await, alas
const writeFileAsync = util.promisify(fs.writeFile);

/**
 * Transform the transpiled code into the text of a module which exports that
 * code as a string.
 */
const wrapCode = es3Code => {
  /* eslint-disable-next-line no-useless-concat */
  const generatedMarker = '@' + 'generated';

  return `/*
 * This is a GENERATED file -- do not edit.
 * To make changes:
 *   1. Edit \`js.js\`, which is the source for this file.
 *   2. Run \`tools/generate-webview-js\`.
 *
 * ${generatedMarker}
 * @flow strict
 */

export default \`
'use strict';

${es3Code.replace(/\\/g, '\\\\')}
\`;
`;
};

(async () => {
  // Define the build process.
  const build = await rollup({
    input: sourceFilename,
    plugins: [
      rollupResolve(),
      rollupBabel({
        exclude: 'node_modules/**',
        /* Our global config file applies React-Native-supplied and -targeted
           transforms. Those are somewhat counterproductive here. */
        configFile: false,
        babelrc: false,

        compact: false,
        comments: false,
        plugins: [['@babel/transform-flow-strip-types']],

        /* See comments in src/webview/js/js.js for details about the target set
           selected here. */
        presets: [['@babel/preset-env', { targets: { android: '4.4', chrome: 30, safari: 10 } }]],
      }),
    ],
  });

  // Execute the build process.
  const { output } = await build.generate({
    format: 'iife' /* "immediately-invoked function expression" */,
    name: 'compiledWebviewJs',
    // TODO: eliminate `wrappedOutput`. See "TODO", below.
    /* file: outputFilename, */
  });

  // In general, Babel may return multiple output chunks. This particular
  // compilation setup, however, should return only a single chunk.
  assert.strictEqual(output.length, 1);

  // Extract and wrap that chunk's code.
  const wrappedOutput = wrapCode(output[0].code);

  // Write the transformed code.
  await writeFileAsync(outputFilename, wrappedOutput);
})().catch(
  // eslint-disable-next-line no-console
  console.error,
);

/* TODO:

  At present, `webview/script.js` wraps this script's output; in turn this
  script applies a wrapper around (the compiled text of) `webview/js.js`.

  This is at least one layer of abstraction more than we need.

  In the future, we'll probably want to make `js.js` compile to a single static
  asset file. Only a <script> tag and a one-to-three-line invocation should need
  to be emitted into the dynamically-rendered HTML.
*/
